class Solution {
 public:
  ListNode* detectCycle(ListNode* head) {
    ListNode* slow = head;
    ListNode* fast = head;
    while (fast!= NULL && fast->next != NULL) {
      slow = slow->next;
      fast = fast->next->next;
      if (slow == fast) {
        slow = head;
        while (slow != fast) {
          slow = slow->next;
          fast = fast->next;
        }
        return slow;
      }
    }
    return nullptr;
  }
};




......................................................................................................................................................................................
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* a = headA;
        ListNode* b = headB;
        if( a == NULL || b == NULL ) return NULL;
        while(a!=b){
            a = a->next;
            b = b->next;
            if(a==b) return a;
            if(a == NULL) a = headB;
            if(b == NULL) b = headA;
        }
        return a;
    }
};

