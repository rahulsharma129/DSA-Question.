class Solution {
 public:
  ListNode* detectCycle(ListNode* head) {
    ListNode* slow = head;
    ListNode* fast = head;
    while (fast!= NULL && fast->next != NULL) {
      slow = slow->next;
      fast = fast->next->next;
      if (slow == fast) {
        slow = head;
        while (slow != fast) {
          slow = slow->next;
          fast = fast->next;
        }
        return slow;
      }
    }
    return nullptr;
  }
};




......................................................................................................................................................................................
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* a = headA;
        ListNode* b = headB;
        if( a == NULL || b == NULL ) return NULL;
        while(a!=b){
            a = a->next;
            b = b->next;
            if(a==b) return a;
            if(a == NULL) a = headB;
            if(b == NULL) b = headA;
        }
        return a;
    }
};

............................................................................................



class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> threesum;
        sort(nums.begin(),nums.end());
        for(int i =0;i<nums.size();i++){
        if(i>0 && nums[i] == nums[i-1]) continue;
        int j = i+1;
        int k = nums.size()-1;
        while(j<k){
            int sum = nums[i] + nums[j] + nums[k];
            if(sum<0){
                j++;
            }
           else if(sum>0){
                k--;
            }
            else {
                vector<int>  temp = { nums[i], nums[j], nums[k]};
                threesum.push_back(temp);
                j++;
                k--;
                while(j<k && nums[j] == nums[j-1]) j++;
                while(j<k && nums[k] == nums[k+1]) k--;
                    
            }

        }
        }
        return threesum;
    }
};

...................................................................................................



class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        int n = nums.size();

        for (int i = 0; i < n-2; i++) {
            if (i > 0 && nums[i] == nums[i-1]) continue; // skip duplicate i
            int j = i+1, k = n-1;

            while (j < k) {
                int total = nums[i] + nums[j] + nums[k];

                if (total == 0) {
                    ans.push_back({nums[i], nums[j], nums[k]});
                    while (j < k && nums[j] == nums[j+1]) j++; // skip dup j
                    while (j < k && nums[k] == nums[k-1]) k--; // skip dup k
                    j++; k--;
                }
                else if (total < 0) j++;
                else k--;
            }
        }
        return ans;
    }
};