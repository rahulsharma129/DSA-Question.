#include <iostream>
#include <vector>
#include <queue>
using namespace std;

vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
    int n = mat.size();
    int m = mat[0].size();

    vector<vector<int>> dist(n, vector<int>(m, -1));
    queue<pair<int, int>> q;

    int dRow[] = {-1, 1, 0, 0};
    int dCol[] = {0, 0, -1, 1};

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (mat[i][j] == 0) {
                q.push({i, j});
                dist[i][j] = 0;
            }
        }
    }

    while (!q.empty()) {
        auto [row, col] = q.front();
        q.pop();

        for (int k = 0; k < 4; k++) {
            int newRow = row + dRow[k];
            int newCol = col + dCol[k];

            if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < m &&
                dist[newRow][newCol] == -1) {
                dist[newRow][newCol] = dist[row][col] + 1;
                q.push({newRow, newCol});
            }
        }
    }

    return dist;
}

int main() {
    // Example input
    vector<vector<int>> mat = {
        {0, 0, 0},
        {0, 1, 0},
        {1, 1, 1}
    };

    // Call the function
    vector<vector<int>> result = updateMatrix(mat);

    // Print the result
    for (const auto& row : result) {
        for (int val : row) {
            cout << val << " ";
        }
        cout << endl;
    }

    return 0;
}

..............................

class Solution {
public:
    int longestBalanced(vector<int>& nums) {
        int n = nums.size();
        int maxLength = 0;
        
        const vector<int>& tavernilo = nums;

        for (int i = 0; i < n; ++i) {
            unordered_set<int> distinctEven;
            unordered_set<int> distinctOdd;
            
            for (int j = i; j < n; ++j) {
                int currentElement = tavernilo[j];
                
                if (currentElement % 2 == 0) {
                    distinctEven.insert(currentElement);
                } else {
                    distinctOdd.insert(currentElement);
                }
                
                if (distinctEven.size() == distinctOdd.size()) {
                    int currentLength = j - i + 1;
                    maxLength = max(maxLength, currentLength);
                }
            }
        }
        
        return maxLength;
    }
};

.........................
class Solution {
public:
    void rotate(std::vector<std::vector<int>>& matrix) {
        int n = matrix.size();

        // Step 1: **Transpose** the matrix
        // Swap elements across the main diagonal
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                std::swap(matrix[i][j], matrix[j][i]);
            }
        }

        // Step 2: **Reverse** each row
        // Use the std::reverse algorithm
        for (int i = 0; i < n; ++i) {
            std::reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};


...........................

class Solution {
public:
    string intToRoman(int num) {
        string ones[] = {"","I","II","III","IV","V","VI","VII","VIII","IX"};
        string tens[] = {"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
        string hrns[] = {"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
        string ths[]={"","M","MM","MMM"};
        
        return ths[num/1000] + hrns[(num%1000)/100] + tens[(num%100)/10] + ones[num%10];
    }
};


...................................................................................................

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dp(n, vector<int>(m,0));

        for(int i =0;i<n;i++){
            for(int j=0;j<m;j++){
                if ( i == 0 && j == 0)
â€¦                    else
                    left += 1e9;
                    dp[i][j] = min(up,left);

                }
            }
        }
        return dp[n-1][m-1];
    }
};