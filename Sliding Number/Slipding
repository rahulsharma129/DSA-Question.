class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        priority_queue<pair<int,int>> pq;

        for(int i=0;i<k;++i) pq.push({nums[i],i});

        int left=0;
        int right=k-1;

        while(right<nums.size()){
            auto top=pq.top();
            if(top.second>=left && top.second<=right){
                res.push_back(top.first);
                ++left;
                ++right;
                if(right<nums.size()) pq.push({nums[right],right});
            }
            else{
                pq.pop();
            }
        }
        return res;
    }
};

..........................

class Solution {
public:
    double largestTriangleArea(vector<vector<int>>& points) {
        double max_area = 0.0;
        int n = points.size();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = j + 1; k < n; ++k) {
                    int x1 = points[i][0], y1 = points[i][1];
                    int x2 = points[j][0], y2 = points[j][1];
                    int x3 = points[k][0], y3 = points[k][1];
                    double area = 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2));
                    max_area = max(max_area, area);
                }
            }
        }
        return max_area;
    }
};
...............


class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k)
    {
        //time complexity: O(n.logn)
        //space complexity: O(n)

        //to store final answer
        vector<int> ans;
        //to store {element:frequency} 
        unordered_map<int,int> ump;   
        //to store 'k most-frequent' elements
        priority_queue<pair<int,int>> maxheap; 

        //storing the frequency of each element in the map(ump)
        for(auto it:nums)
            ump[it]++;

        //pushing {frequency,element} in the priority_queue(it will automatically put elements with larger frequencies at the top(root-node))
        for(auto it:ump)
            maxheap.push({it.second,it.first});

        //loop to extract 'k' most frequent elements from maxheap
        while(k--)
        {
            //inserting element with 'highest frequency' in the answer(ans)
            ans.push_back(maxheap.top().second);
            //removing it from maxheap
            maxheap.pop();
        }

        //returning 'top 'k' frequent elements'
        return ans;
    }
};